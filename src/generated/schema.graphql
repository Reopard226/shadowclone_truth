### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Candidate {
  age: Int!
  bio_other: String
  bio_policy_position(after: String, before: String, first: Int, last: Int, orderBy: PositionOrderByInput, skip: Int, where: PositionWhereInput): [Position!]
  bio_qualifications(after: String, before: String, first: Int, last: Int, orderBy: QualificationOrderByInput, skip: Int, where: QualificationWhereInput): [Qualification!]
  current_office: String!
  gender: Gender!
  id: ID!
  latest_odds: Float
  latest_poll: Float
  name: String!
  party: String!
  photo: String
  state: String!
}

input CandidateCreateInput {
  age: Int!
  bio_other: String
  bio_policy_position: PositionCreateManyInput
  bio_qualifications: QualificationCreateManyWithoutCandidateInput
  current_office: String!
  gender: Gender
  id: ID
  latest_odds: Float
  latest_poll: Float
  name: String!
  party: String!
  photo: String
  state: String!
}

input CandidateCreateOneInput {
  connect: CandidateWhereUniqueInput
  create: CandidateCreateInput
}

input CandidateCreateOneWithoutBio_qualificationsInput {
  connect: CandidateWhereUniqueInput
  create: CandidateCreateWithoutBio_qualificationsInput
}

input CandidateCreateWithoutBio_qualificationsInput {
  age: Int!
  bio_other: String
  bio_policy_position: PositionCreateManyInput
  current_office: String!
  gender: Gender
  id: ID
  latest_odds: Float
  latest_poll: Float
  name: String!
  party: String!
  photo: String
  state: String!
}

enum CandidateOrderByInput {
  age_ASC
  age_DESC
  bio_other_ASC
  bio_other_DESC
  createdAt_ASC
  createdAt_DESC
  current_office_ASC
  current_office_DESC
  gender_ASC
  gender_DESC
  id_ASC
  id_DESC
  latest_odds_ASC
  latest_odds_DESC
  latest_poll_ASC
  latest_poll_DESC
  name_ASC
  name_DESC
  party_ASC
  party_DESC
  photo_ASC
  photo_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CandidatePosition {
  candidate: Candidate!
  id: ID!
  latest: Boolean!
  link: String
  position: Position!
  rank: Int!
  time: DateTime!
}

input CandidatePositionCreateInput {
  candidate: CandidateCreateOneInput!
  id: ID
  latest: Boolean
  link: String
  position: PositionCreateOneInput!
  rank: Int!
  time: DateTime!
}

input CandidatePositionCreateOneInput {
  connect: CandidatePositionWhereUniqueInput
  create: CandidatePositionCreateInput
}

input CandidatePositionWhereUniqueInput {
  id: ID
}

input CandidateUpdateInput {
  age: Int
  bio_other: String
  bio_policy_position: PositionUpdateManyInput
  bio_qualifications: QualificationUpdateManyWithoutCandidateInput
  current_office: String
  gender: Gender
  latest_odds: Float
  latest_poll: Float
  name: String
  party: String
  photo: String
  state: String
}

input CandidateWhereInput {
  age: Int
  age_gt: Int
  age_gte: Int
  age_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_not: Int
  age_not_in: [Int!]
  AND: [CandidateWhereInput!]
  bio_other: String
  bio_other_contains: String
  bio_other_ends_with: String
  bio_other_gt: String
  bio_other_gte: String
  bio_other_in: [String!]
  bio_other_lt: String
  bio_other_lte: String
  bio_other_not: String
  bio_other_not_contains: String
  bio_other_not_ends_with: String
  bio_other_not_in: [String!]
  bio_other_not_starts_with: String
  bio_other_starts_with: String
  bio_policy_position_every: PositionWhereInput
  bio_policy_position_none: PositionWhereInput
  bio_policy_position_some: PositionWhereInput
  bio_qualifications_every: QualificationWhereInput
  bio_qualifications_none: QualificationWhereInput
  bio_qualifications_some: QualificationWhereInput
  current_office: String
  current_office_contains: String
  current_office_ends_with: String
  current_office_gt: String
  current_office_gte: String
  current_office_in: [String!]
  current_office_lt: String
  current_office_lte: String
  current_office_not: String
  current_office_not_contains: String
  current_office_not_ends_with: String
  current_office_not_in: [String!]
  current_office_not_starts_with: String
  current_office_starts_with: String
  gender: Gender
  gender_in: [Gender!]
  gender_not: Gender
  gender_not_in: [Gender!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  latest_odds: Float
  latest_odds_gt: Float
  latest_odds_gte: Float
  latest_odds_in: [Float!]
  latest_odds_lt: Float
  latest_odds_lte: Float
  latest_odds_not: Float
  latest_odds_not_in: [Float!]
  latest_poll: Float
  latest_poll_gt: Float
  latest_poll_gte: Float
  latest_poll_in: [Float!]
  latest_poll_lt: Float
  latest_poll_lte: Float
  latest_poll_not: Float
  latest_poll_not_in: [Float!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CandidateWhereInput!]
  OR: [CandidateWhereInput!]
  party: String
  party_contains: String
  party_ends_with: String
  party_gt: String
  party_gte: String
  party_in: [String!]
  party_lt: String
  party_lte: String
  party_not: String
  party_not_contains: String
  party_not_ends_with: String
  party_not_in: [String!]
  party_not_starts_with: String
  party_starts_with: String
  photo: String
  photo_contains: String
  photo_ends_with: String
  photo_gt: String
  photo_gte: String
  photo_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_not: String
  photo_not_contains: String
  photo_not_ends_with: String
  photo_not_in: [String!]
  photo_not_starts_with: String
  photo_starts_with: String
  state: String
  state_contains: String
  state_ends_with: String
  state_gt: String
  state_gte: String
  state_in: [String!]
  state_lt: String
  state_lte: String
  state_not: String
  state_not_contains: String
  state_not_ends_with: String
  state_not_in: [String!]
  state_not_starts_with: String
  state_starts_with: String
}

input CandidateWhereUniqueInput {
  id: ID
}

enum CategoryType {
  HEALTH
}

scalar DateTime

enum Gender {
  FEMALE
  MALE
}

enum LikeType {
  DISLIKE
  LIKE
  UNSPECIFIED
}

type Mutation {
  createCandidate(data: CandidateCreateInput!): Candidate!
  createPoll(data: PollCreateInput!): Poll!
  createPosition(data: PositionCreateInput!): Position!
  createQualification(data: QualificationCreateInput!): Qualification!
  createTopic(data: TopicCreateInput!): Topic!
  createUser(data: UserCreateInput!): User!
  createUserPositionLike(data: UserPositionLikeCreateInput!): UserPositionLike!
  createUserQualificationLike(data: UserQualificationLikeCreateInput!): UserQualificationLike!
  createUserVote(data: UserVoteCreateInput!): UserVote!
  updateCandidate(data: CandidateUpdateInput!, where: CandidateWhereUniqueInput!): Candidate
}

type Poll {
  candidate: Candidate!
  date: DateTime!
  error_margin: String
  id: ID!
  link_to_poll: String
  poll_type: PollType!
  source: User!
}

input PollCreateInput {
  candidate: CandidateCreateOneInput!
  date: DateTime!
  error_margin: String
  id: ID
  link_to_poll: String
  poll_type: PollType
  source: UserCreateOneInput!
}

enum PollType {
  HEADTOHEAD
  PRIMARY
}

input PollWhereUniqueInput {
  id: ID
}

type Position {
  detail: String
  id: ID!
  name: String!
  summary: String
  topic: Topic
}

input PositionCreateInput {
  detail: String
  id: ID
  name: String!
  summary: String
  topic: TopicCreateOneInput
}

input PositionCreateManyInput {
  connect: [PositionWhereUniqueInput!]
  create: [PositionCreateInput!]
}

input PositionCreateOneInput {
  connect: PositionWhereUniqueInput
  create: PositionCreateInput
}

enum PositionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  detail_ASC
  detail_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  summary_ASC
  summary_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PositionScalarWhereInput {
  AND: [PositionScalarWhereInput!]
  detail: String
  detail_contains: String
  detail_ends_with: String
  detail_gt: String
  detail_gte: String
  detail_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_not: String
  detail_not_contains: String
  detail_not_ends_with: String
  detail_not_in: [String!]
  detail_not_starts_with: String
  detail_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PositionScalarWhereInput!]
  OR: [PositionScalarWhereInput!]
  summary: String
  summary_contains: String
  summary_ends_with: String
  summary_gt: String
  summary_gte: String
  summary_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_not: String
  summary_not_contains: String
  summary_not_ends_with: String
  summary_not_in: [String!]
  summary_not_starts_with: String
  summary_starts_with: String
}

input PositionUpdateDataInput {
  detail: String
  name: String
  summary: String
  topic: TopicUpdateOneInput
}

input PositionUpdateManyDataInput {
  detail: String
  name: String
  summary: String
}

input PositionUpdateManyInput {
  connect: [PositionWhereUniqueInput!]
  create: [PositionCreateInput!]
  delete: [PositionWhereUniqueInput!]
  deleteMany: [PositionScalarWhereInput!]
  disconnect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  update: [PositionUpdateWithWhereUniqueNestedInput!]
  updateMany: [PositionUpdateManyWithWhereNestedInput!]
  upsert: [PositionUpsertWithWhereUniqueNestedInput!]
}

input PositionUpdateManyWithWhereNestedInput {
  data: PositionUpdateManyDataInput!
  where: PositionScalarWhereInput!
}

input PositionUpdateWithWhereUniqueNestedInput {
  data: PositionUpdateDataInput!
  where: PositionWhereUniqueInput!
}

input PositionUpsertWithWhereUniqueNestedInput {
  create: PositionCreateInput!
  update: PositionUpdateDataInput!
  where: PositionWhereUniqueInput!
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  detail: String
  detail_contains: String
  detail_ends_with: String
  detail_gt: String
  detail_gte: String
  detail_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_not: String
  detail_not_contains: String
  detail_not_ends_with: String
  detail_not_in: [String!]
  detail_not_starts_with: String
  detail_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  summary: String
  summary_contains: String
  summary_ends_with: String
  summary_gt: String
  summary_gte: String
  summary_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_not: String
  summary_not_contains: String
  summary_not_ends_with: String
  summary_not_in: [String!]
  summary_not_starts_with: String
  summary_starts_with: String
  topic: TopicWhereInput
}

input PositionWhereUniqueInput {
  id: ID
}

type Qualification {
  candidate: Candidate!
  detail: String
  id: ID!
  name: String!
  rank: Int!
  summary: String
  years: Int!
}

input QualificationCreateInput {
  candidate: CandidateCreateOneWithoutBio_qualificationsInput!
  detail: String
  id: ID
  name: String!
  rank: Int!
  summary: String
  years: Int!
}

input QualificationCreateManyWithoutCandidateInput {
  connect: [QualificationWhereUniqueInput!]
  create: [QualificationCreateWithoutCandidateInput!]
}

input QualificationCreateOneInput {
  connect: QualificationWhereUniqueInput
  create: QualificationCreateInput
}

input QualificationCreateWithoutCandidateInput {
  detail: String
  id: ID
  name: String!
  rank: Int!
  summary: String
  years: Int!
}

enum QualificationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  detail_ASC
  detail_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rank_ASC
  rank_DESC
  summary_ASC
  summary_DESC
  updatedAt_ASC
  updatedAt_DESC
  years_ASC
  years_DESC
}

input QualificationScalarWhereInput {
  AND: [QualificationScalarWhereInput!]
  detail: String
  detail_contains: String
  detail_ends_with: String
  detail_gt: String
  detail_gte: String
  detail_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_not: String
  detail_not_contains: String
  detail_not_ends_with: String
  detail_not_in: [String!]
  detail_not_starts_with: String
  detail_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [QualificationScalarWhereInput!]
  OR: [QualificationScalarWhereInput!]
  rank: Int
  rank_gt: Int
  rank_gte: Int
  rank_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_not: Int
  rank_not_in: [Int!]
  summary: String
  summary_contains: String
  summary_ends_with: String
  summary_gt: String
  summary_gte: String
  summary_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_not: String
  summary_not_contains: String
  summary_not_ends_with: String
  summary_not_in: [String!]
  summary_not_starts_with: String
  summary_starts_with: String
  years: Int
  years_gt: Int
  years_gte: Int
  years_in: [Int!]
  years_lt: Int
  years_lte: Int
  years_not: Int
  years_not_in: [Int!]
}

input QualificationUpdateManyDataInput {
  detail: String
  name: String
  rank: Int
  summary: String
  years: Int
}

input QualificationUpdateManyWithoutCandidateInput {
  connect: [QualificationWhereUniqueInput!]
  create: [QualificationCreateWithoutCandidateInput!]
  delete: [QualificationWhereUniqueInput!]
  deleteMany: [QualificationScalarWhereInput!]
  disconnect: [QualificationWhereUniqueInput!]
  set: [QualificationWhereUniqueInput!]
  update: [QualificationUpdateWithWhereUniqueWithoutCandidateInput!]
  updateMany: [QualificationUpdateManyWithWhereNestedInput!]
  upsert: [QualificationUpsertWithWhereUniqueWithoutCandidateInput!]
}

input QualificationUpdateManyWithWhereNestedInput {
  data: QualificationUpdateManyDataInput!
  where: QualificationScalarWhereInput!
}

input QualificationUpdateWithoutCandidateDataInput {
  detail: String
  name: String
  rank: Int
  summary: String
  years: Int
}

input QualificationUpdateWithWhereUniqueWithoutCandidateInput {
  data: QualificationUpdateWithoutCandidateDataInput!
  where: QualificationWhereUniqueInput!
}

input QualificationUpsertWithWhereUniqueWithoutCandidateInput {
  create: QualificationCreateWithoutCandidateInput!
  update: QualificationUpdateWithoutCandidateDataInput!
  where: QualificationWhereUniqueInput!
}

input QualificationWhereInput {
  AND: [QualificationWhereInput!]
  candidate: CandidateWhereInput
  detail: String
  detail_contains: String
  detail_ends_with: String
  detail_gt: String
  detail_gte: String
  detail_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_not: String
  detail_not_contains: String
  detail_not_ends_with: String
  detail_not_in: [String!]
  detail_not_starts_with: String
  detail_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [QualificationWhereInput!]
  OR: [QualificationWhereInput!]
  rank: Int
  rank_gt: Int
  rank_gte: Int
  rank_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_not: Int
  rank_not_in: [Int!]
  summary: String
  summary_contains: String
  summary_ends_with: String
  summary_gt: String
  summary_gte: String
  summary_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_not: String
  summary_not_contains: String
  summary_not_ends_with: String
  summary_not_in: [String!]
  summary_not_starts_with: String
  summary_starts_with: String
  years: Int
  years_gt: Int
  years_gte: Int
  years_in: [Int!]
  years_lt: Int
  years_lte: Int
  years_not: Int
  years_not_in: [Int!]
}

input QualificationWhereUniqueInput {
  id: ID
}

type Query {
  candidates(after: String, before: String, first: Int, last: Int, orderBy: CandidateOrderByInput, skip: Int, where: CandidateWhereInput): [Candidate!]!
  poll(where: PollWhereUniqueInput!): Poll
  positions(after: String, before: String, first: Int, last: Int, orderBy: PositionOrderByInput, skip: Int, where: PositionWhereInput): [Position!]!
  qualifications(after: String, before: String, first: Int, last: Int, orderBy: QualificationOrderByInput, skip: Int, where: QualificationWhereInput): [Qualification!]!
  topic(where: TopicWhereUniqueInput!): Topic
  user(where: UserWhereUniqueInput!): User
  userByEmail(email: String): [User!]
  userPositionLike(where: UserPositionLikeWhereUniqueInput!): UserPositionLike
  userQualificationLike(where: UserQualificationLikeWhereUniqueInput!): UserQualificationLike
  userVote(where: UserVoteWhereUniqueInput!): UserVote
}

type Topic {
  category: CategoryType!
  id: ID!
  name: String!
}

input TopicCreateInput {
  category: CategoryType
  id: ID
  name: String!
}

input TopicCreateOneInput {
  connect: TopicWhereUniqueInput
  create: TopicCreateInput
}

input TopicUpdateDataInput {
  category: CategoryType
  name: String
}

input TopicUpdateOneInput {
  connect: TopicWhereUniqueInput
  create: TopicCreateInput
  delete: Boolean
  disconnect: Boolean
  update: TopicUpdateDataInput
  upsert: TopicUpsertNestedInput
}

input TopicUpsertNestedInput {
  create: TopicCreateInput!
  update: TopicUpdateDataInput!
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  category: CategoryType
  category_in: [CategoryType!]
  category_not: CategoryType
  category_not_in: [CategoryType!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TopicWhereInput!]
  OR: [TopicWhereInput!]
}

input TopicWhereUniqueInput {
  id: ID
}

type User {
  email: String!
  gender: Gender!
  id: ID!
  name: String!
}

input UserCreateInput {
  email: String!
  gender: Gender
  id: ID
  name: String!
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

type UserPositionLike {
  candidate: Candidate!
  candidate_position: CandidatePosition!
  id: ID!
  latest: Boolean!
  like: LikeType!
  time: DateTime!
  user: User!
}

input UserPositionLikeCreateInput {
  candidate: CandidateCreateOneInput!
  candidate_position: CandidatePositionCreateOneInput!
  id: ID
  latest: Boolean
  like: LikeType
  time: DateTime!
  user: UserCreateOneInput!
}

input UserPositionLikeWhereUniqueInput {
  id: ID
}

type UserQualificationLike {
  candidate: Candidate!
  id: ID!
  latest: Boolean!
  like: LikeType!
  qualification: Qualification!
  time: DateTime!
  user: User!
}

input UserQualificationLikeCreateInput {
  candidate: CandidateCreateOneInput!
  id: ID
  latest: Boolean
  like: LikeType
  qualification: QualificationCreateOneInput!
  time: DateTime!
  user: UserCreateOneInput!
}

input UserQualificationLikeWhereUniqueInput {
  id: ID
}

type UserVote {
  candidate: Candidate!
  id: ID!
  latest: Boolean!
  time: DateTime!
  user: User!
  vote_type: VoteType!
}

input UserVoteCreateInput {
  candidate: CandidateCreateOneInput!
  id: ID
  latest: Boolean
  time: DateTime!
  user: UserCreateOneInput!
  vote_type: VoteType
}

input UserVoteWhereUniqueInput {
  id: ID
}

input UserWhereUniqueInput {
  email: String
  id: ID
}

enum VoteType {
  COMPROMISE
  FAVORITE
  TOP
  UNKNOWNS
  VETO
}
