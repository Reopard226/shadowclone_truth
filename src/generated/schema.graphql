### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Candidate {
  age: Int!
  bio_other: String
  bio_policy_position(after: String, before: String, first: Int, last: Int, orderBy: PositionOrderByInput, skip: Int, where: PositionWhereInput): [Position!]
  bio_qualifications(after: String, before: String, first: Int, last: Int, orderBy: QualificationOrderByInput, skip: Int, where: QualificationWhereInput): [Qualification!]
  current_office: String!
  gender: Gender
  id: ID!
  latest_odds: Float
  latest_poll: Float
  name: String!
  party: String!
  photo: String
  state: String!
}

input CandidateCreateInput {
  age: Int!
  bio_other: String
  bio_policy_position: PositionCreateManyInput
  bio_qualifications: QualificationCreateManyInput
  current_office: String!
  gender: Gender
  id: ID
  latest_odds: Float
  latest_poll: Float
  name: String!
  party: String!
  photo: String
  state: String!
}

enum CandidateOrderByInput {
  age_ASC
  age_DESC
  bio_other_ASC
  bio_other_DESC
  createdAt_ASC
  createdAt_DESC
  current_office_ASC
  current_office_DESC
  gender_ASC
  gender_DESC
  id_ASC
  id_DESC
  latest_odds_ASC
  latest_odds_DESC
  latest_poll_ASC
  latest_poll_DESC
  name_ASC
  name_DESC
  party_ASC
  party_DESC
  photo_ASC
  photo_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CandidatePosition {
  candidateId: String!
  id: ID!
  latest: Boolean
  link: String
  positionId: String!
  rank: Int
  time: DateTime
}

enum CandidatePositionOrderByInput {
  candidateId_ASC
  candidateId_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  latest_ASC
  latest_DESC
  link_ASC
  link_DESC
  positionId_ASC
  positionId_DESC
  rank_ASC
  rank_DESC
  time_ASC
  time_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CandidatePositionWhereInput {
  AND: [CandidatePositionWhereInput!]
  candidateId: String
  candidateId_contains: String
  candidateId_ends_with: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_not: String
  candidateId_not_contains: String
  candidateId_not_ends_with: String
  candidateId_not_in: [String!]
  candidateId_not_starts_with: String
  candidateId_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  latest: Boolean
  latest_not: Boolean
  link: String
  link_contains: String
  link_ends_with: String
  link_gt: String
  link_gte: String
  link_in: [String!]
  link_lt: String
  link_lte: String
  link_not: String
  link_not_contains: String
  link_not_ends_with: String
  link_not_in: [String!]
  link_not_starts_with: String
  link_starts_with: String
  NOT: [CandidatePositionWhereInput!]
  OR: [CandidatePositionWhereInput!]
  positionId: String
  positionId_contains: String
  positionId_ends_with: String
  positionId_gt: String
  positionId_gte: String
  positionId_in: [String!]
  positionId_lt: String
  positionId_lte: String
  positionId_not: String
  positionId_not_contains: String
  positionId_not_ends_with: String
  positionId_not_in: [String!]
  positionId_not_starts_with: String
  positionId_starts_with: String
  rank: Int
  rank_gt: Int
  rank_gte: Int
  rank_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_not: Int
  rank_not_in: [Int!]
  time: DateTime
  time_gt: DateTime
  time_gte: DateTime
  time_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_not: DateTime
  time_not_in: [DateTime!]
}

input CandidateWhereInput {
  age: Int
  age_gt: Int
  age_gte: Int
  age_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_not: Int
  age_not_in: [Int!]
  AND: [CandidateWhereInput!]
  bio_other: String
  bio_other_contains: String
  bio_other_ends_with: String
  bio_other_gt: String
  bio_other_gte: String
  bio_other_in: [String!]
  bio_other_lt: String
  bio_other_lte: String
  bio_other_not: String
  bio_other_not_contains: String
  bio_other_not_ends_with: String
  bio_other_not_in: [String!]
  bio_other_not_starts_with: String
  bio_other_starts_with: String
  bio_policy_position_every: PositionWhereInput
  bio_policy_position_none: PositionWhereInput
  bio_policy_position_some: PositionWhereInput
  bio_qualifications_every: QualificationWhereInput
  bio_qualifications_none: QualificationWhereInput
  bio_qualifications_some: QualificationWhereInput
  current_office: String
  current_office_contains: String
  current_office_ends_with: String
  current_office_gt: String
  current_office_gte: String
  current_office_in: [String!]
  current_office_lt: String
  current_office_lte: String
  current_office_not: String
  current_office_not_contains: String
  current_office_not_ends_with: String
  current_office_not_in: [String!]
  current_office_not_starts_with: String
  current_office_starts_with: String
  gender: Gender
  gender_in: [Gender!]
  gender_not: Gender
  gender_not_in: [Gender!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  latest_odds: Float
  latest_odds_gt: Float
  latest_odds_gte: Float
  latest_odds_in: [Float!]
  latest_odds_lt: Float
  latest_odds_lte: Float
  latest_odds_not: Float
  latest_odds_not_in: [Float!]
  latest_poll: Float
  latest_poll_gt: Float
  latest_poll_gte: Float
  latest_poll_in: [Float!]
  latest_poll_lt: Float
  latest_poll_lte: Float
  latest_poll_not: Float
  latest_poll_not_in: [Float!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CandidateWhereInput!]
  OR: [CandidateWhereInput!]
  party: String
  party_contains: String
  party_ends_with: String
  party_gt: String
  party_gte: String
  party_in: [String!]
  party_lt: String
  party_lte: String
  party_not: String
  party_not_contains: String
  party_not_ends_with: String
  party_not_in: [String!]
  party_not_starts_with: String
  party_starts_with: String
  photo: String
  photo_contains: String
  photo_ends_with: String
  photo_gt: String
  photo_gte: String
  photo_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_not: String
  photo_not_contains: String
  photo_not_ends_with: String
  photo_not_in: [String!]
  photo_not_starts_with: String
  photo_starts_with: String
  state: String
  state_contains: String
  state_ends_with: String
  state_gt: String
  state_gte: String
  state_in: [String!]
  state_lt: String
  state_lte: String
  state_not: String
  state_not_contains: String
  state_not_ends_with: String
  state_not_in: [String!]
  state_not_starts_with: String
  state_starts_with: String
}

input CandidateWhereUniqueInput {
  id: ID
}

enum CategoryType {
  HEALTH
}

scalar DateTime

enum Gender {
  FEMALE
  MALE
}

enum LikeType {
  DISLIKE
  LIKE
  UNSPECIFIED
}

type Mutation {
  createCandidate(data: CandidateCreateInput!): Candidate!
  createPoll(candidateId: ID, pollType: PollType, userId: ID): Poll
  createPosition(data: PositionCreateInput!): Position!
  createQualification(data: QualificationCreateInput!): Qualification!
  createTopic(data: TopicCreateInput!): Topic!
  createUser(data: UserCreateInput!): User!
  createUserPositionLike(candidate_positionId: ID, like: LikeType, userId: ID): UserPositionLike
  createUserQualificationLike(like: LikeType, qualificationId: ID, userId: ID): UserQualificationLike
  createUserVote(candidateId: ID, userId: ID, voteType: VoteType): UserVote
  deleteCandidate(where: CandidateWhereUniqueInput!): Candidate
  deletePosition(where: PositionWhereUniqueInput!): Position
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUserVote(where: UserVoteWhereUniqueInput!): UserVote
}

type Poll {
  candidateId: String!
  date: DateTime
  error_margin: String
  id: ID!
  link_to_poll: String
  poll_type: PollType!
  userId: String!
}

enum PollOrderByInput {
  candidateId_ASC
  candidateId_DESC
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  error_margin_ASC
  error_margin_DESC
  id_ASC
  id_DESC
  link_to_poll_ASC
  link_to_poll_DESC
  poll_type_ASC
  poll_type_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

enum PollType {
  HEADTOHEAD
  PRIMARY
}

input PollWhereInput {
  AND: [PollWhereInput!]
  candidateId: String
  candidateId_contains: String
  candidateId_ends_with: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_not: String
  candidateId_not_contains: String
  candidateId_not_ends_with: String
  candidateId_not_in: [String!]
  candidateId_not_starts_with: String
  candidateId_starts_with: String
  date: DateTime
  date_gt: DateTime
  date_gte: DateTime
  date_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_not: DateTime
  date_not_in: [DateTime!]
  error_margin: String
  error_margin_contains: String
  error_margin_ends_with: String
  error_margin_gt: String
  error_margin_gte: String
  error_margin_in: [String!]
  error_margin_lt: String
  error_margin_lte: String
  error_margin_not: String
  error_margin_not_contains: String
  error_margin_not_ends_with: String
  error_margin_not_in: [String!]
  error_margin_not_starts_with: String
  error_margin_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  link_to_poll: String
  link_to_poll_contains: String
  link_to_poll_ends_with: String
  link_to_poll_gt: String
  link_to_poll_gte: String
  link_to_poll_in: [String!]
  link_to_poll_lt: String
  link_to_poll_lte: String
  link_to_poll_not: String
  link_to_poll_not_contains: String
  link_to_poll_not_ends_with: String
  link_to_poll_not_in: [String!]
  link_to_poll_not_starts_with: String
  link_to_poll_starts_with: String
  NOT: [PollWhereInput!]
  OR: [PollWhereInput!]
  poll_type: PollType
  poll_type_in: [PollType!]
  poll_type_not: PollType
  poll_type_not_in: [PollType!]
  userId: String
  userId_contains: String
  userId_ends_with: String
  userId_gt: String
  userId_gte: String
  userId_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_not: String
  userId_not_contains: String
  userId_not_ends_with: String
  userId_not_in: [String!]
  userId_not_starts_with: String
  userId_starts_with: String
}

type Position {
  detail: String
  id: ID!
  name: String!
  summary: String
  topic: Topic
}

input PositionCreateInput {
  detail: String
  id: ID
  name: String!
  summary: String
  topic: TopicCreateOneInput
}

input PositionCreateManyInput {
  connect: [PositionWhereUniqueInput!]
  create: [PositionCreateInput!]
}

enum PositionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  detail_ASC
  detail_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  summary_ASC
  summary_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  detail: String
  detail_contains: String
  detail_ends_with: String
  detail_gt: String
  detail_gte: String
  detail_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_not: String
  detail_not_contains: String
  detail_not_ends_with: String
  detail_not_in: [String!]
  detail_not_starts_with: String
  detail_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  summary: String
  summary_contains: String
  summary_ends_with: String
  summary_gt: String
  summary_gte: String
  summary_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_not: String
  summary_not_contains: String
  summary_not_ends_with: String
  summary_not_in: [String!]
  summary_not_starts_with: String
  summary_starts_with: String
  topic: TopicWhereInput
}

input PositionWhereUniqueInput {
  id: ID
}

type Qualification {
  candidateId: String
  detail: String
  id: ID!
  name: String!
  rank: Int
  summary: String
  years: Int!
}

input QualificationCreateInput {
  candidateId: String
  detail: String
  id: ID
  name: String!
  rank: Int
  summary: String
  years: Int!
}

input QualificationCreateManyInput {
  connect: [QualificationWhereUniqueInput!]
  create: [QualificationCreateInput!]
}

enum QualificationOrderByInput {
  candidateId_ASC
  candidateId_DESC
  createdAt_ASC
  createdAt_DESC
  detail_ASC
  detail_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rank_ASC
  rank_DESC
  summary_ASC
  summary_DESC
  updatedAt_ASC
  updatedAt_DESC
  years_ASC
  years_DESC
}

input QualificationWhereInput {
  AND: [QualificationWhereInput!]
  candidateId: String
  candidateId_contains: String
  candidateId_ends_with: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_not: String
  candidateId_not_contains: String
  candidateId_not_ends_with: String
  candidateId_not_in: [String!]
  candidateId_not_starts_with: String
  candidateId_starts_with: String
  detail: String
  detail_contains: String
  detail_ends_with: String
  detail_gt: String
  detail_gte: String
  detail_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_not: String
  detail_not_contains: String
  detail_not_ends_with: String
  detail_not_in: [String!]
  detail_not_starts_with: String
  detail_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [QualificationWhereInput!]
  OR: [QualificationWhereInput!]
  rank: Int
  rank_gt: Int
  rank_gte: Int
  rank_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_not: Int
  rank_not_in: [Int!]
  summary: String
  summary_contains: String
  summary_ends_with: String
  summary_gt: String
  summary_gte: String
  summary_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_not: String
  summary_not_contains: String
  summary_not_ends_with: String
  summary_not_in: [String!]
  summary_not_starts_with: String
  summary_starts_with: String
  years: Int
  years_gt: Int
  years_gte: Int
  years_in: [Int!]
  years_lt: Int
  years_lte: Int
  years_not: Int
  years_not_in: [Int!]
}

input QualificationWhereUniqueInput {
  id: ID
}

type Query {
  candidatePositions(after: String, before: String, first: Int, last: Int, orderBy: CandidatePositionOrderByInput, skip: Int, where: CandidatePositionWhereInput): [CandidatePosition!]!
  candidates(after: String, before: String, first: Int, last: Int, orderBy: CandidateOrderByInput, skip: Int, where: CandidateWhereInput): [Candidate!]!
  polls(after: String, before: String, first: Int, last: Int, orderBy: PollOrderByInput, skip: Int, where: PollWhereInput): [Poll!]!
  positions(after: String, before: String, first: Int, last: Int, orderBy: PositionOrderByInput, skip: Int, where: PositionWhereInput): [Position!]!
  qualifications(after: String, before: String, first: Int, last: Int, orderBy: QualificationOrderByInput, skip: Int, where: QualificationWhereInput): [Qualification!]!
  topics(after: String, before: String, first: Int, last: Int, orderBy: TopicOrderByInput, skip: Int, where: TopicWhereInput): [Topic!]!
  userByEmail(email: String): [User!]
  userPositionLikes(after: String, before: String, first: Int, last: Int, orderBy: UserPositionLikeOrderByInput, skip: Int, where: UserPositionLikeWhereInput): [UserPositionLike!]!
  userQualificationLikes(after: String, before: String, first: Int, last: Int, orderBy: UserQualificationLikeOrderByInput, skip: Int, where: UserQualificationLikeWhereInput): [UserQualificationLike!]!
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  userVotes(after: String, before: String, first: Int, last: Int, orderBy: UserVoteOrderByInput, skip: Int, where: UserVoteWhereInput): [UserVote!]!
}

type Topic {
  category: CategoryType!
  id: ID!
  name: String!
}

input TopicCreateInput {
  category: CategoryType
  id: ID
  name: String!
}

input TopicCreateOneInput {
  connect: TopicWhereUniqueInput
  create: TopicCreateInput
}

enum TopicOrderByInput {
  category_ASC
  category_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  category: CategoryType
  category_in: [CategoryType!]
  category_not: CategoryType
  category_not_in: [CategoryType!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TopicWhereInput!]
  OR: [TopicWhereInput!]
}

input TopicWhereUniqueInput {
  id: ID
}

type User {
  email: String!
  gender: Gender!
  id: ID!
  name: String!
}

input UserCreateInput {
  email: String!
  gender: Gender
  id: ID
  name: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPositionLike {
  candidate_positionId: String!
  id: ID!
  latest: Boolean
  like: LikeType
  time: DateTime
  userId: String!
}

enum UserPositionLikeOrderByInput {
  candidate_positionId_ASC
  candidate_positionId_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  latest_ASC
  latest_DESC
  like_ASC
  like_DESC
  time_ASC
  time_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

input UserPositionLikeWhereInput {
  AND: [UserPositionLikeWhereInput!]
  candidate_positionId: String
  candidate_positionId_contains: String
  candidate_positionId_ends_with: String
  candidate_positionId_gt: String
  candidate_positionId_gte: String
  candidate_positionId_in: [String!]
  candidate_positionId_lt: String
  candidate_positionId_lte: String
  candidate_positionId_not: String
  candidate_positionId_not_contains: String
  candidate_positionId_not_ends_with: String
  candidate_positionId_not_in: [String!]
  candidate_positionId_not_starts_with: String
  candidate_positionId_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  latest: Boolean
  latest_not: Boolean
  like: LikeType
  like_in: [LikeType!]
  like_not: LikeType
  like_not_in: [LikeType!]
  NOT: [UserPositionLikeWhereInput!]
  OR: [UserPositionLikeWhereInput!]
  time: DateTime
  time_gt: DateTime
  time_gte: DateTime
  time_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_not: DateTime
  time_not_in: [DateTime!]
  userId: String
  userId_contains: String
  userId_ends_with: String
  userId_gt: String
  userId_gte: String
  userId_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_not: String
  userId_not_contains: String
  userId_not_ends_with: String
  userId_not_in: [String!]
  userId_not_starts_with: String
  userId_starts_with: String
}

type UserQualificationLike {
  id: ID!
  latest: Boolean
  like: LikeType!
  qualificationId: String!
  time: DateTime
  userId: String!
}

enum UserQualificationLikeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  latest_ASC
  latest_DESC
  like_ASC
  like_DESC
  qualificationId_ASC
  qualificationId_DESC
  time_ASC
  time_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

input UserQualificationLikeWhereInput {
  AND: [UserQualificationLikeWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  latest: Boolean
  latest_not: Boolean
  like: LikeType
  like_in: [LikeType!]
  like_not: LikeType
  like_not_in: [LikeType!]
  NOT: [UserQualificationLikeWhereInput!]
  OR: [UserQualificationLikeWhereInput!]
  qualificationId: String
  qualificationId_contains: String
  qualificationId_ends_with: String
  qualificationId_gt: String
  qualificationId_gte: String
  qualificationId_in: [String!]
  qualificationId_lt: String
  qualificationId_lte: String
  qualificationId_not: String
  qualificationId_not_contains: String
  qualificationId_not_ends_with: String
  qualificationId_not_in: [String!]
  qualificationId_not_starts_with: String
  qualificationId_starts_with: String
  time: DateTime
  time_gt: DateTime
  time_gte: DateTime
  time_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_not: DateTime
  time_not_in: [DateTime!]
  userId: String
  userId_contains: String
  userId_ends_with: String
  userId_gt: String
  userId_gte: String
  userId_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_not: String
  userId_not_contains: String
  userId_not_ends_with: String
  userId_not_in: [String!]
  userId_not_starts_with: String
  userId_starts_with: String
}

type UserVote {
  candidateId: String!
  id: ID!
  latest: Boolean
  time: DateTime
  userId: String!
  vote_type: VoteType!
}

enum UserVoteOrderByInput {
  candidateId_ASC
  candidateId_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  latest_ASC
  latest_DESC
  time_ASC
  time_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
  vote_type_ASC
  vote_type_DESC
}

input UserVoteWhereInput {
  AND: [UserVoteWhereInput!]
  candidateId: String
  candidateId_contains: String
  candidateId_ends_with: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_not: String
  candidateId_not_contains: String
  candidateId_not_ends_with: String
  candidateId_not_in: [String!]
  candidateId_not_starts_with: String
  candidateId_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  latest: Boolean
  latest_not: Boolean
  NOT: [UserVoteWhereInput!]
  OR: [UserVoteWhereInput!]
  time: DateTime
  time_gt: DateTime
  time_gte: DateTime
  time_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_not: DateTime
  time_not_in: [DateTime!]
  userId: String
  userId_contains: String
  userId_ends_with: String
  userId_gt: String
  userId_gte: String
  userId_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_not: String
  userId_not_contains: String
  userId_not_ends_with: String
  userId_not_in: [String!]
  userId_not_starts_with: String
  userId_starts_with: String
  vote_type: VoteType
  vote_type_in: [VoteType!]
  vote_type_not: VoteType
  vote_type_not_in: [VoteType!]
}

input UserVoteWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  gender: Gender
  gender_in: [Gender!]
  gender_not: Gender
  gender_not_in: [Gender!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}

enum VoteType {
  COMPROMISE
  FAVORITE
  TOP
  UNKNOWNS
  VETO
}
