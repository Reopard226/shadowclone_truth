// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCandidate {
  count: Int!
}

type AggregateCandidatePosition {
  count: Int!
}

type AggregatePoll {
  count: Int!
}

type AggregatePosition {
  count: Int!
}

type AggregateQualification {
  count: Int!
}

type AggregateTopic {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserPositionLike {
  count: Int!
}

type AggregateUserQualificationLike {
  count: Int!
}

type AggregateUserVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Candidate {
  id: ID!
  name: String!
  photo: String
  party: String!
  state: String!
  current_office: String!
  age: Int!
  gender: Gender
  latest_poll: Float
  latest_odds: Float
  bio_qualifications(where: QualificationWhereInput, orderBy: QualificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Qualification!]
  bio_policy_position(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Position!]
  bio_other: String
}

type CandidateConnection {
  pageInfo: PageInfo!
  edges: [CandidateEdge]!
  aggregate: AggregateCandidate!
}

input CandidateCreateInput {
  id: ID
  name: String!
  photo: String
  party: String!
  state: String!
  current_office: String!
  age: Int!
  gender: Gender
  latest_poll: Float
  latest_odds: Float
  bio_qualifications: QualificationCreateManyInput
  bio_policy_position: PositionCreateManyInput
  bio_other: String
}

type CandidateEdge {
  node: Candidate!
  cursor: String!
}

enum CandidateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  photo_ASC
  photo_DESC
  party_ASC
  party_DESC
  state_ASC
  state_DESC
  current_office_ASC
  current_office_DESC
  age_ASC
  age_DESC
  gender_ASC
  gender_DESC
  latest_poll_ASC
  latest_poll_DESC
  latest_odds_ASC
  latest_odds_DESC
  bio_other_ASC
  bio_other_DESC
}

type CandidatePosition {
  id: ID!
  positionId: String!
  candidateId: String!
  time: DateTime
  link: String
  rank: Int
  latest: Boolean
}

type CandidatePositionConnection {
  pageInfo: PageInfo!
  edges: [CandidatePositionEdge]!
  aggregate: AggregateCandidatePosition!
}

input CandidatePositionCreateInput {
  id: ID
  positionId: String!
  candidateId: String!
  link: String
  rank: Int
  latest: Boolean
}

type CandidatePositionEdge {
  node: CandidatePosition!
  cursor: String!
}

enum CandidatePositionOrderByInput {
  id_ASC
  id_DESC
  positionId_ASC
  positionId_DESC
  candidateId_ASC
  candidateId_DESC
  time_ASC
  time_DESC
  link_ASC
  link_DESC
  rank_ASC
  rank_DESC
  latest_ASC
  latest_DESC
}

type CandidatePositionPreviousValues {
  id: ID!
  positionId: String!
  candidateId: String!
  time: DateTime
  link: String
  rank: Int
  latest: Boolean
}

type CandidatePositionSubscriptionPayload {
  mutation: MutationType!
  node: CandidatePosition
  updatedFields: [String!]
  previousValues: CandidatePositionPreviousValues
}

input CandidatePositionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CandidatePositionWhereInput
  AND: [CandidatePositionSubscriptionWhereInput!]
  OR: [CandidatePositionSubscriptionWhereInput!]
  NOT: [CandidatePositionSubscriptionWhereInput!]
}

input CandidatePositionUpdateInput {
  positionId: String
  candidateId: String
  link: String
  rank: Int
  latest: Boolean
}

input CandidatePositionUpdateManyMutationInput {
  positionId: String
  candidateId: String
  link: String
  rank: Int
  latest: Boolean
}

input CandidatePositionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  positionId: String
  positionId_not: String
  positionId_in: [String!]
  positionId_not_in: [String!]
  positionId_lt: String
  positionId_lte: String
  positionId_gt: String
  positionId_gte: String
  positionId_contains: String
  positionId_not_contains: String
  positionId_starts_with: String
  positionId_not_starts_with: String
  positionId_ends_with: String
  positionId_not_ends_with: String
  candidateId: String
  candidateId_not: String
  candidateId_in: [String!]
  candidateId_not_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_contains: String
  candidateId_not_contains: String
  candidateId_starts_with: String
  candidateId_not_starts_with: String
  candidateId_ends_with: String
  candidateId_not_ends_with: String
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  rank: Int
  rank_not: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_gt: Int
  rank_gte: Int
  latest: Boolean
  latest_not: Boolean
  AND: [CandidatePositionWhereInput!]
  OR: [CandidatePositionWhereInput!]
  NOT: [CandidatePositionWhereInput!]
}

input CandidatePositionWhereUniqueInput {
  id: ID
}

type CandidatePreviousValues {
  id: ID!
  name: String!
  photo: String
  party: String!
  state: String!
  current_office: String!
  age: Int!
  gender: Gender
  latest_poll: Float
  latest_odds: Float
  bio_other: String
}

type CandidateSubscriptionPayload {
  mutation: MutationType!
  node: Candidate
  updatedFields: [String!]
  previousValues: CandidatePreviousValues
}

input CandidateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CandidateWhereInput
  AND: [CandidateSubscriptionWhereInput!]
  OR: [CandidateSubscriptionWhereInput!]
  NOT: [CandidateSubscriptionWhereInput!]
}

input CandidateUpdateInput {
  name: String
  photo: String
  party: String
  state: String
  current_office: String
  age: Int
  gender: Gender
  latest_poll: Float
  latest_odds: Float
  bio_qualifications: QualificationUpdateManyInput
  bio_policy_position: PositionUpdateManyInput
  bio_other: String
}

input CandidateUpdateManyMutationInput {
  name: String
  photo: String
  party: String
  state: String
  current_office: String
  age: Int
  gender: Gender
  latest_poll: Float
  latest_odds: Float
  bio_other: String
}

input CandidateWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  party: String
  party_not: String
  party_in: [String!]
  party_not_in: [String!]
  party_lt: String
  party_lte: String
  party_gt: String
  party_gte: String
  party_contains: String
  party_not_contains: String
  party_starts_with: String
  party_not_starts_with: String
  party_ends_with: String
  party_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  current_office: String
  current_office_not: String
  current_office_in: [String!]
  current_office_not_in: [String!]
  current_office_lt: String
  current_office_lte: String
  current_office_gt: String
  current_office_gte: String
  current_office_contains: String
  current_office_not_contains: String
  current_office_starts_with: String
  current_office_not_starts_with: String
  current_office_ends_with: String
  current_office_not_ends_with: String
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  latest_poll: Float
  latest_poll_not: Float
  latest_poll_in: [Float!]
  latest_poll_not_in: [Float!]
  latest_poll_lt: Float
  latest_poll_lte: Float
  latest_poll_gt: Float
  latest_poll_gte: Float
  latest_odds: Float
  latest_odds_not: Float
  latest_odds_in: [Float!]
  latest_odds_not_in: [Float!]
  latest_odds_lt: Float
  latest_odds_lte: Float
  latest_odds_gt: Float
  latest_odds_gte: Float
  bio_qualifications_every: QualificationWhereInput
  bio_qualifications_some: QualificationWhereInput
  bio_qualifications_none: QualificationWhereInput
  bio_policy_position_every: PositionWhereInput
  bio_policy_position_some: PositionWhereInput
  bio_policy_position_none: PositionWhereInput
  bio_other: String
  bio_other_not: String
  bio_other_in: [String!]
  bio_other_not_in: [String!]
  bio_other_lt: String
  bio_other_lte: String
  bio_other_gt: String
  bio_other_gte: String
  bio_other_contains: String
  bio_other_not_contains: String
  bio_other_starts_with: String
  bio_other_not_starts_with: String
  bio_other_ends_with: String
  bio_other_not_ends_with: String
  AND: [CandidateWhereInput!]
  OR: [CandidateWhereInput!]
  NOT: [CandidateWhereInput!]
}

input CandidateWhereUniqueInput {
  id: ID
}

enum CategoryType {
  HEALTH
}

scalar DateTime

enum Gender {
  MALE
  FEMALE
}

enum LikeType {
  LIKE
  DISLIKE
  UNSPECIFIED
}

scalar Long

type Mutation {
  createCandidate(data: CandidateCreateInput!): Candidate!
  updateCandidate(data: CandidateUpdateInput!, where: CandidateWhereUniqueInput!): Candidate
  updateManyCandidates(data: CandidateUpdateManyMutationInput!, where: CandidateWhereInput): BatchPayload!
  upsertCandidate(where: CandidateWhereUniqueInput!, create: CandidateCreateInput!, update: CandidateUpdateInput!): Candidate!
  deleteCandidate(where: CandidateWhereUniqueInput!): Candidate
  deleteManyCandidates(where: CandidateWhereInput): BatchPayload!
  createCandidatePosition(data: CandidatePositionCreateInput!): CandidatePosition!
  updateCandidatePosition(data: CandidatePositionUpdateInput!, where: CandidatePositionWhereUniqueInput!): CandidatePosition
  updateManyCandidatePositions(data: CandidatePositionUpdateManyMutationInput!, where: CandidatePositionWhereInput): BatchPayload!
  upsertCandidatePosition(where: CandidatePositionWhereUniqueInput!, create: CandidatePositionCreateInput!, update: CandidatePositionUpdateInput!): CandidatePosition!
  deleteCandidatePosition(where: CandidatePositionWhereUniqueInput!): CandidatePosition
  deleteManyCandidatePositions(where: CandidatePositionWhereInput): BatchPayload!
  createPoll(data: PollCreateInput!): Poll!
  updatePoll(data: PollUpdateInput!, where: PollWhereUniqueInput!): Poll
  updateManyPolls(data: PollUpdateManyMutationInput!, where: PollWhereInput): BatchPayload!
  upsertPoll(where: PollWhereUniqueInput!, create: PollCreateInput!, update: PollUpdateInput!): Poll!
  deletePoll(where: PollWhereUniqueInput!): Poll
  deleteManyPolls(where: PollWhereInput): BatchPayload!
  createPosition(data: PositionCreateInput!): Position!
  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position
  updateManyPositions(data: PositionUpdateManyMutationInput!, where: PositionWhereInput): BatchPayload!
  upsertPosition(where: PositionWhereUniqueInput!, create: PositionCreateInput!, update: PositionUpdateInput!): Position!
  deletePosition(where: PositionWhereUniqueInput!): Position
  deleteManyPositions(where: PositionWhereInput): BatchPayload!
  createQualification(data: QualificationCreateInput!): Qualification!
  updateQualification(data: QualificationUpdateInput!, where: QualificationWhereUniqueInput!): Qualification
  updateManyQualifications(data: QualificationUpdateManyMutationInput!, where: QualificationWhereInput): BatchPayload!
  upsertQualification(where: QualificationWhereUniqueInput!, create: QualificationCreateInput!, update: QualificationUpdateInput!): Qualification!
  deleteQualification(where: QualificationWhereUniqueInput!): Qualification
  deleteManyQualifications(where: QualificationWhereInput): BatchPayload!
  createTopic(data: TopicCreateInput!): Topic!
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
  updateManyTopics(data: TopicUpdateManyMutationInput!, where: TopicWhereInput): BatchPayload!
  upsertTopic(where: TopicWhereUniqueInput!, create: TopicCreateInput!, update: TopicUpdateInput!): Topic!
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteManyTopics(where: TopicWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserPositionLike(data: UserPositionLikeCreateInput!): UserPositionLike!
  updateUserPositionLike(data: UserPositionLikeUpdateInput!, where: UserPositionLikeWhereUniqueInput!): UserPositionLike
  updateManyUserPositionLikes(data: UserPositionLikeUpdateManyMutationInput!, where: UserPositionLikeWhereInput): BatchPayload!
  upsertUserPositionLike(where: UserPositionLikeWhereUniqueInput!, create: UserPositionLikeCreateInput!, update: UserPositionLikeUpdateInput!): UserPositionLike!
  deleteUserPositionLike(where: UserPositionLikeWhereUniqueInput!): UserPositionLike
  deleteManyUserPositionLikes(where: UserPositionLikeWhereInput): BatchPayload!
  createUserQualificationLike(data: UserQualificationLikeCreateInput!): UserQualificationLike!
  updateUserQualificationLike(data: UserQualificationLikeUpdateInput!, where: UserQualificationLikeWhereUniqueInput!): UserQualificationLike
  updateManyUserQualificationLikes(data: UserQualificationLikeUpdateManyMutationInput!, where: UserQualificationLikeWhereInput): BatchPayload!
  upsertUserQualificationLike(where: UserQualificationLikeWhereUniqueInput!, create: UserQualificationLikeCreateInput!, update: UserQualificationLikeUpdateInput!): UserQualificationLike!
  deleteUserQualificationLike(where: UserQualificationLikeWhereUniqueInput!): UserQualificationLike
  deleteManyUserQualificationLikes(where: UserQualificationLikeWhereInput): BatchPayload!
  createUserVote(data: UserVoteCreateInput!): UserVote!
  updateUserVote(data: UserVoteUpdateInput!, where: UserVoteWhereUniqueInput!): UserVote
  updateManyUserVotes(data: UserVoteUpdateManyMutationInput!, where: UserVoteWhereInput): BatchPayload!
  upsertUserVote(where: UserVoteWhereUniqueInput!, create: UserVoteCreateInput!, update: UserVoteUpdateInput!): UserVote!
  deleteUserVote(where: UserVoteWhereUniqueInput!): UserVote
  deleteManyUserVotes(where: UserVoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Poll {
  id: ID!
  userId: String!
  date: DateTime
  candidateId: String!
  poll_type: PollType!
  error_margin: String
  link_to_poll: String
}

type PollConnection {
  pageInfo: PageInfo!
  edges: [PollEdge]!
  aggregate: AggregatePoll!
}

input PollCreateInput {
  id: ID
  userId: String!
  candidateId: String!
  poll_type: PollType
  error_margin: String
  link_to_poll: String
}

type PollEdge {
  node: Poll!
  cursor: String!
}

enum PollOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  date_ASC
  date_DESC
  candidateId_ASC
  candidateId_DESC
  poll_type_ASC
  poll_type_DESC
  error_margin_ASC
  error_margin_DESC
  link_to_poll_ASC
  link_to_poll_DESC
}

type PollPreviousValues {
  id: ID!
  userId: String!
  date: DateTime
  candidateId: String!
  poll_type: PollType!
  error_margin: String
  link_to_poll: String
}

type PollSubscriptionPayload {
  mutation: MutationType!
  node: Poll
  updatedFields: [String!]
  previousValues: PollPreviousValues
}

input PollSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PollWhereInput
  AND: [PollSubscriptionWhereInput!]
  OR: [PollSubscriptionWhereInput!]
  NOT: [PollSubscriptionWhereInput!]
}

enum PollType {
  PRIMARY
  HEADTOHEAD
}

input PollUpdateInput {
  userId: String
  candidateId: String
  poll_type: PollType
  error_margin: String
  link_to_poll: String
}

input PollUpdateManyMutationInput {
  userId: String
  candidateId: String
  poll_type: PollType
  error_margin: String
  link_to_poll: String
}

input PollWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  candidateId: String
  candidateId_not: String
  candidateId_in: [String!]
  candidateId_not_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_contains: String
  candidateId_not_contains: String
  candidateId_starts_with: String
  candidateId_not_starts_with: String
  candidateId_ends_with: String
  candidateId_not_ends_with: String
  poll_type: PollType
  poll_type_not: PollType
  poll_type_in: [PollType!]
  poll_type_not_in: [PollType!]
  error_margin: String
  error_margin_not: String
  error_margin_in: [String!]
  error_margin_not_in: [String!]
  error_margin_lt: String
  error_margin_lte: String
  error_margin_gt: String
  error_margin_gte: String
  error_margin_contains: String
  error_margin_not_contains: String
  error_margin_starts_with: String
  error_margin_not_starts_with: String
  error_margin_ends_with: String
  error_margin_not_ends_with: String
  link_to_poll: String
  link_to_poll_not: String
  link_to_poll_in: [String!]
  link_to_poll_not_in: [String!]
  link_to_poll_lt: String
  link_to_poll_lte: String
  link_to_poll_gt: String
  link_to_poll_gte: String
  link_to_poll_contains: String
  link_to_poll_not_contains: String
  link_to_poll_starts_with: String
  link_to_poll_not_starts_with: String
  link_to_poll_ends_with: String
  link_to_poll_not_ends_with: String
  AND: [PollWhereInput!]
  OR: [PollWhereInput!]
  NOT: [PollWhereInput!]
}

input PollWhereUniqueInput {
  id: ID
}

type Position {
  id: ID!
  name: String!
  summary: String
  topic: Topic
  detail: String
}

type PositionConnection {
  pageInfo: PageInfo!
  edges: [PositionEdge]!
  aggregate: AggregatePosition!
}

input PositionCreateInput {
  id: ID
  name: String!
  summary: String
  topic: TopicCreateOneInput
  detail: String
}

input PositionCreateManyInput {
  create: [PositionCreateInput!]
  connect: [PositionWhereUniqueInput!]
}

type PositionEdge {
  node: Position!
  cursor: String!
}

enum PositionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  summary_ASC
  summary_DESC
  detail_ASC
  detail_DESC
}

type PositionPreviousValues {
  id: ID!
  name: String!
  summary: String
  detail: String
}

input PositionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  detail: String
  detail_not: String
  detail_in: [String!]
  detail_not_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_gt: String
  detail_gte: String
  detail_contains: String
  detail_not_contains: String
  detail_starts_with: String
  detail_not_starts_with: String
  detail_ends_with: String
  detail_not_ends_with: String
  AND: [PositionScalarWhereInput!]
  OR: [PositionScalarWhereInput!]
  NOT: [PositionScalarWhereInput!]
}

type PositionSubscriptionPayload {
  mutation: MutationType!
  node: Position
  updatedFields: [String!]
  previousValues: PositionPreviousValues
}

input PositionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PositionWhereInput
  AND: [PositionSubscriptionWhereInput!]
  OR: [PositionSubscriptionWhereInput!]
  NOT: [PositionSubscriptionWhereInput!]
}

input PositionUpdateDataInput {
  name: String
  summary: String
  topic: TopicUpdateOneInput
  detail: String
}

input PositionUpdateInput {
  name: String
  summary: String
  topic: TopicUpdateOneInput
  detail: String
}

input PositionUpdateManyDataInput {
  name: String
  summary: String
  detail: String
}

input PositionUpdateManyInput {
  create: [PositionCreateInput!]
  update: [PositionUpdateWithWhereUniqueNestedInput!]
  upsert: [PositionUpsertWithWhereUniqueNestedInput!]
  delete: [PositionWhereUniqueInput!]
  connect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  disconnect: [PositionWhereUniqueInput!]
  deleteMany: [PositionScalarWhereInput!]
  updateMany: [PositionUpdateManyWithWhereNestedInput!]
}

input PositionUpdateManyMutationInput {
  name: String
  summary: String
  detail: String
}

input PositionUpdateManyWithWhereNestedInput {
  where: PositionScalarWhereInput!
  data: PositionUpdateManyDataInput!
}

input PositionUpdateWithWhereUniqueNestedInput {
  where: PositionWhereUniqueInput!
  data: PositionUpdateDataInput!
}

input PositionUpsertWithWhereUniqueNestedInput {
  where: PositionWhereUniqueInput!
  update: PositionUpdateDataInput!
  create: PositionCreateInput!
}

input PositionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  topic: TopicWhereInput
  detail: String
  detail_not: String
  detail_in: [String!]
  detail_not_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_gt: String
  detail_gte: String
  detail_contains: String
  detail_not_contains: String
  detail_starts_with: String
  detail_not_starts_with: String
  detail_ends_with: String
  detail_not_ends_with: String
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
}

input PositionWhereUniqueInput {
  id: ID
}

type Qualification {
  id: ID!
  name: String!
  summary: String
  detail: String
  years: Int!
  rank: Int
  candidateId: String
}

type QualificationConnection {
  pageInfo: PageInfo!
  edges: [QualificationEdge]!
  aggregate: AggregateQualification!
}

input QualificationCreateInput {
  id: ID
  name: String!
  summary: String
  detail: String
  years: Int!
  rank: Int
  candidateId: String
}

input QualificationCreateManyInput {
  create: [QualificationCreateInput!]
  connect: [QualificationWhereUniqueInput!]
}

type QualificationEdge {
  node: Qualification!
  cursor: String!
}

enum QualificationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  summary_ASC
  summary_DESC
  detail_ASC
  detail_DESC
  years_ASC
  years_DESC
  rank_ASC
  rank_DESC
  candidateId_ASC
  candidateId_DESC
}

type QualificationPreviousValues {
  id: ID!
  name: String!
  summary: String
  detail: String
  years: Int!
  rank: Int
  candidateId: String
}

input QualificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  detail: String
  detail_not: String
  detail_in: [String!]
  detail_not_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_gt: String
  detail_gte: String
  detail_contains: String
  detail_not_contains: String
  detail_starts_with: String
  detail_not_starts_with: String
  detail_ends_with: String
  detail_not_ends_with: String
  years: Int
  years_not: Int
  years_in: [Int!]
  years_not_in: [Int!]
  years_lt: Int
  years_lte: Int
  years_gt: Int
  years_gte: Int
  rank: Int
  rank_not: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_gt: Int
  rank_gte: Int
  candidateId: String
  candidateId_not: String
  candidateId_in: [String!]
  candidateId_not_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_contains: String
  candidateId_not_contains: String
  candidateId_starts_with: String
  candidateId_not_starts_with: String
  candidateId_ends_with: String
  candidateId_not_ends_with: String
  AND: [QualificationScalarWhereInput!]
  OR: [QualificationScalarWhereInput!]
  NOT: [QualificationScalarWhereInput!]
}

type QualificationSubscriptionPayload {
  mutation: MutationType!
  node: Qualification
  updatedFields: [String!]
  previousValues: QualificationPreviousValues
}

input QualificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QualificationWhereInput
  AND: [QualificationSubscriptionWhereInput!]
  OR: [QualificationSubscriptionWhereInput!]
  NOT: [QualificationSubscriptionWhereInput!]
}

input QualificationUpdateDataInput {
  name: String
  summary: String
  detail: String
  years: Int
  rank: Int
  candidateId: String
}

input QualificationUpdateInput {
  name: String
  summary: String
  detail: String
  years: Int
  rank: Int
  candidateId: String
}

input QualificationUpdateManyDataInput {
  name: String
  summary: String
  detail: String
  years: Int
  rank: Int
  candidateId: String
}

input QualificationUpdateManyInput {
  create: [QualificationCreateInput!]
  update: [QualificationUpdateWithWhereUniqueNestedInput!]
  upsert: [QualificationUpsertWithWhereUniqueNestedInput!]
  delete: [QualificationWhereUniqueInput!]
  connect: [QualificationWhereUniqueInput!]
  set: [QualificationWhereUniqueInput!]
  disconnect: [QualificationWhereUniqueInput!]
  deleteMany: [QualificationScalarWhereInput!]
  updateMany: [QualificationUpdateManyWithWhereNestedInput!]
}

input QualificationUpdateManyMutationInput {
  name: String
  summary: String
  detail: String
  years: Int
  rank: Int
  candidateId: String
}

input QualificationUpdateManyWithWhereNestedInput {
  where: QualificationScalarWhereInput!
  data: QualificationUpdateManyDataInput!
}

input QualificationUpdateWithWhereUniqueNestedInput {
  where: QualificationWhereUniqueInput!
  data: QualificationUpdateDataInput!
}

input QualificationUpsertWithWhereUniqueNestedInput {
  where: QualificationWhereUniqueInput!
  update: QualificationUpdateDataInput!
  create: QualificationCreateInput!
}

input QualificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  detail: String
  detail_not: String
  detail_in: [String!]
  detail_not_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_gt: String
  detail_gte: String
  detail_contains: String
  detail_not_contains: String
  detail_starts_with: String
  detail_not_starts_with: String
  detail_ends_with: String
  detail_not_ends_with: String
  years: Int
  years_not: Int
  years_in: [Int!]
  years_not_in: [Int!]
  years_lt: Int
  years_lte: Int
  years_gt: Int
  years_gte: Int
  rank: Int
  rank_not: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_gt: Int
  rank_gte: Int
  candidateId: String
  candidateId_not: String
  candidateId_in: [String!]
  candidateId_not_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_contains: String
  candidateId_not_contains: String
  candidateId_starts_with: String
  candidateId_not_starts_with: String
  candidateId_ends_with: String
  candidateId_not_ends_with: String
  AND: [QualificationWhereInput!]
  OR: [QualificationWhereInput!]
  NOT: [QualificationWhereInput!]
}

input QualificationWhereUniqueInput {
  id: ID
}

type Query {
  candidate(where: CandidateWhereUniqueInput!): Candidate
  candidates(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Candidate]!
  candidatesConnection(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CandidateConnection!
  candidatePosition(where: CandidatePositionWhereUniqueInput!): CandidatePosition
  candidatePositions(where: CandidatePositionWhereInput, orderBy: CandidatePositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CandidatePosition]!
  candidatePositionsConnection(where: CandidatePositionWhereInput, orderBy: CandidatePositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CandidatePositionConnection!
  poll(where: PollWhereUniqueInput!): Poll
  polls(where: PollWhereInput, orderBy: PollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poll]!
  pollsConnection(where: PollWhereInput, orderBy: PollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PollConnection!
  position(where: PositionWhereUniqueInput!): Position
  positions(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Position]!
  positionsConnection(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PositionConnection!
  qualification(where: QualificationWhereUniqueInput!): Qualification
  qualifications(where: QualificationWhereInput, orderBy: QualificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Qualification]!
  qualificationsConnection(where: QualificationWhereInput, orderBy: QualificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QualificationConnection!
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic]!
  topicsConnection(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopicConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userPositionLike(where: UserPositionLikeWhereUniqueInput!): UserPositionLike
  userPositionLikes(where: UserPositionLikeWhereInput, orderBy: UserPositionLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserPositionLike]!
  userPositionLikesConnection(where: UserPositionLikeWhereInput, orderBy: UserPositionLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserPositionLikeConnection!
  userQualificationLike(where: UserQualificationLikeWhereUniqueInput!): UserQualificationLike
  userQualificationLikes(where: UserQualificationLikeWhereInput, orderBy: UserQualificationLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserQualificationLike]!
  userQualificationLikesConnection(where: UserQualificationLikeWhereInput, orderBy: UserQualificationLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserQualificationLikeConnection!
  userVote(where: UserVoteWhereUniqueInput!): UserVote
  userVotes(where: UserVoteWhereInput, orderBy: UserVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserVote]!
  userVotesConnection(where: UserVoteWhereInput, orderBy: UserVoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserVoteConnection!
  node(id: ID!): Node
}

type Subscription {
  candidate(where: CandidateSubscriptionWhereInput): CandidateSubscriptionPayload
  candidatePosition(where: CandidatePositionSubscriptionWhereInput): CandidatePositionSubscriptionPayload
  poll(where: PollSubscriptionWhereInput): PollSubscriptionPayload
  position(where: PositionSubscriptionWhereInput): PositionSubscriptionPayload
  qualification(where: QualificationSubscriptionWhereInput): QualificationSubscriptionPayload
  topic(where: TopicSubscriptionWhereInput): TopicSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userPositionLike(where: UserPositionLikeSubscriptionWhereInput): UserPositionLikeSubscriptionPayload
  userQualificationLike(where: UserQualificationLikeSubscriptionWhereInput): UserQualificationLikeSubscriptionPayload
  userVote(where: UserVoteSubscriptionWhereInput): UserVoteSubscriptionPayload
}

type Topic {
  id: ID!
  name: String!
  category: CategoryType!
}

type TopicConnection {
  pageInfo: PageInfo!
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}

input TopicCreateInput {
  id: ID
  name: String!
  category: CategoryType
}

input TopicCreateOneInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
}

type TopicEdge {
  node: Topic!
  cursor: String!
}

enum TopicOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  category_ASC
  category_DESC
}

type TopicPreviousValues {
  id: ID!
  name: String!
  category: CategoryType!
}

type TopicSubscriptionPayload {
  mutation: MutationType!
  node: Topic
  updatedFields: [String!]
  previousValues: TopicPreviousValues
}

input TopicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TopicWhereInput
  AND: [TopicSubscriptionWhereInput!]
  OR: [TopicSubscriptionWhereInput!]
  NOT: [TopicSubscriptionWhereInput!]
}

input TopicUpdateDataInput {
  name: String
  category: CategoryType
}

input TopicUpdateInput {
  name: String
  category: CategoryType
}

input TopicUpdateManyMutationInput {
  name: String
  category: CategoryType
}

input TopicUpdateOneInput {
  create: TopicCreateInput
  update: TopicUpdateDataInput
  upsert: TopicUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TopicWhereUniqueInput
}

input TopicUpsertNestedInput {
  update: TopicUpdateDataInput!
  create: TopicCreateInput!
}

input TopicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  category: CategoryType
  category_not: CategoryType
  category_in: [CategoryType!]
  category_not_in: [CategoryType!]
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
}

input TopicWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String!
  name: String!
  gender: Gender!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  gender: Gender
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  gender_ASC
  gender_DESC
}

type UserPositionLike {
  id: ID!
  userId: String!
  candidate_positionId: String!
  like: LikeType
  time: DateTime
  latest: Boolean
}

type UserPositionLikeConnection {
  pageInfo: PageInfo!
  edges: [UserPositionLikeEdge]!
  aggregate: AggregateUserPositionLike!
}

input UserPositionLikeCreateInput {
  id: ID
  userId: String!
  candidate_positionId: String!
  like: LikeType
  latest: Boolean
}

type UserPositionLikeEdge {
  node: UserPositionLike!
  cursor: String!
}

enum UserPositionLikeOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  candidate_positionId_ASC
  candidate_positionId_DESC
  like_ASC
  like_DESC
  time_ASC
  time_DESC
  latest_ASC
  latest_DESC
}

type UserPositionLikePreviousValues {
  id: ID!
  userId: String!
  candidate_positionId: String!
  like: LikeType
  time: DateTime
  latest: Boolean
}

type UserPositionLikeSubscriptionPayload {
  mutation: MutationType!
  node: UserPositionLike
  updatedFields: [String!]
  previousValues: UserPositionLikePreviousValues
}

input UserPositionLikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserPositionLikeWhereInput
  AND: [UserPositionLikeSubscriptionWhereInput!]
  OR: [UserPositionLikeSubscriptionWhereInput!]
  NOT: [UserPositionLikeSubscriptionWhereInput!]
}

input UserPositionLikeUpdateInput {
  userId: String
  candidate_positionId: String
  like: LikeType
  latest: Boolean
}

input UserPositionLikeUpdateManyMutationInput {
  userId: String
  candidate_positionId: String
  like: LikeType
  latest: Boolean
}

input UserPositionLikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  candidate_positionId: String
  candidate_positionId_not: String
  candidate_positionId_in: [String!]
  candidate_positionId_not_in: [String!]
  candidate_positionId_lt: String
  candidate_positionId_lte: String
  candidate_positionId_gt: String
  candidate_positionId_gte: String
  candidate_positionId_contains: String
  candidate_positionId_not_contains: String
  candidate_positionId_starts_with: String
  candidate_positionId_not_starts_with: String
  candidate_positionId_ends_with: String
  candidate_positionId_not_ends_with: String
  like: LikeType
  like_not: LikeType
  like_in: [LikeType!]
  like_not_in: [LikeType!]
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  latest: Boolean
  latest_not: Boolean
  AND: [UserPositionLikeWhereInput!]
  OR: [UserPositionLikeWhereInput!]
  NOT: [UserPositionLikeWhereInput!]
}

input UserPositionLikeWhereUniqueInput {
  id: ID
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
  gender: Gender!
}

type UserQualificationLike {
  id: ID!
  userId: String!
  qualificationId: String!
  like: LikeType!
  time: DateTime
  latest: Boolean
}

type UserQualificationLikeConnection {
  pageInfo: PageInfo!
  edges: [UserQualificationLikeEdge]!
  aggregate: AggregateUserQualificationLike!
}

input UserQualificationLikeCreateInput {
  id: ID
  userId: String!
  qualificationId: String!
  like: LikeType
  latest: Boolean
}

type UserQualificationLikeEdge {
  node: UserQualificationLike!
  cursor: String!
}

enum UserQualificationLikeOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  qualificationId_ASC
  qualificationId_DESC
  like_ASC
  like_DESC
  time_ASC
  time_DESC
  latest_ASC
  latest_DESC
}

type UserQualificationLikePreviousValues {
  id: ID!
  userId: String!
  qualificationId: String!
  like: LikeType!
  time: DateTime
  latest: Boolean
}

type UserQualificationLikeSubscriptionPayload {
  mutation: MutationType!
  node: UserQualificationLike
  updatedFields: [String!]
  previousValues: UserQualificationLikePreviousValues
}

input UserQualificationLikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserQualificationLikeWhereInput
  AND: [UserQualificationLikeSubscriptionWhereInput!]
  OR: [UserQualificationLikeSubscriptionWhereInput!]
  NOT: [UserQualificationLikeSubscriptionWhereInput!]
}

input UserQualificationLikeUpdateInput {
  userId: String
  qualificationId: String
  like: LikeType
  latest: Boolean
}

input UserQualificationLikeUpdateManyMutationInput {
  userId: String
  qualificationId: String
  like: LikeType
  latest: Boolean
}

input UserQualificationLikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  qualificationId: String
  qualificationId_not: String
  qualificationId_in: [String!]
  qualificationId_not_in: [String!]
  qualificationId_lt: String
  qualificationId_lte: String
  qualificationId_gt: String
  qualificationId_gte: String
  qualificationId_contains: String
  qualificationId_not_contains: String
  qualificationId_starts_with: String
  qualificationId_not_starts_with: String
  qualificationId_ends_with: String
  qualificationId_not_ends_with: String
  like: LikeType
  like_not: LikeType
  like_in: [LikeType!]
  like_not_in: [LikeType!]
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  latest: Boolean
  latest_not: Boolean
  AND: [UserQualificationLikeWhereInput!]
  OR: [UserQualificationLikeWhereInput!]
  NOT: [UserQualificationLikeWhereInput!]
}

input UserQualificationLikeWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  gender: Gender
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  gender: Gender
}

type UserVote {
  id: ID!
  candidateId: String!
  userId: String!
  vote_type: VoteType!
  time: DateTime
  latest: Boolean
}

type UserVoteConnection {
  pageInfo: PageInfo!
  edges: [UserVoteEdge]!
  aggregate: AggregateUserVote!
}

input UserVoteCreateInput {
  id: ID
  candidateId: String!
  userId: String!
  vote_type: VoteType
  latest: Boolean
}

type UserVoteEdge {
  node: UserVote!
  cursor: String!
}

enum UserVoteOrderByInput {
  id_ASC
  id_DESC
  candidateId_ASC
  candidateId_DESC
  userId_ASC
  userId_DESC
  vote_type_ASC
  vote_type_DESC
  time_ASC
  time_DESC
  latest_ASC
  latest_DESC
}

type UserVotePreviousValues {
  id: ID!
  candidateId: String!
  userId: String!
  vote_type: VoteType!
  time: DateTime
  latest: Boolean
}

type UserVoteSubscriptionPayload {
  mutation: MutationType!
  node: UserVote
  updatedFields: [String!]
  previousValues: UserVotePreviousValues
}

input UserVoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserVoteWhereInput
  AND: [UserVoteSubscriptionWhereInput!]
  OR: [UserVoteSubscriptionWhereInput!]
  NOT: [UserVoteSubscriptionWhereInput!]
}

input UserVoteUpdateInput {
  candidateId: String
  userId: String
  vote_type: VoteType
  latest: Boolean
}

input UserVoteUpdateManyMutationInput {
  candidateId: String
  userId: String
  vote_type: VoteType
  latest: Boolean
}

input UserVoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  candidateId: String
  candidateId_not: String
  candidateId_in: [String!]
  candidateId_not_in: [String!]
  candidateId_lt: String
  candidateId_lte: String
  candidateId_gt: String
  candidateId_gte: String
  candidateId_contains: String
  candidateId_not_contains: String
  candidateId_starts_with: String
  candidateId_not_starts_with: String
  candidateId_ends_with: String
  candidateId_not_ends_with: String
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  vote_type: VoteType
  vote_type_not: VoteType
  vote_type_in: [VoteType!]
  vote_type_not_in: [VoteType!]
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  latest: Boolean
  latest_not: Boolean
  AND: [UserVoteWhereInput!]
  OR: [UserVoteWhereInput!]
  NOT: [UserVoteWhereInput!]
}

input UserVoteWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum VoteType {
  TOP
  FAVORITE
  COMPROMISE
  VETO
  UNKNOWNS
}
`